diff --git a/tools/gyp/pylib/gyp/__init__.py b/tools/gyp/pylib/gyp/__init__.py
index d6cc01307d..c7d9b9a458 100755
--- a/tools/gyp/pylib/gyp/__init__.py
+++ b/tools/gyp/pylib/gyp/__init__.py
@@ -473,6 +473,13 @@ def gyp_main(args):
         action="store_true",
         help="Show the version and exit.",
     )
+    parser.add_argument(
+        "--toolset",
+        dest="toolset",
+        action="store",
+        default=None,
+        help="Toolset to be used",
+    )
 
     options, build_files_arg = parser.parse_args(args)
     if options.version:
diff --git a/tools/gyp/pylib/gyp/common.py b/tools/gyp/pylib/gyp/common.py
index b73a0c55b1..206618e6ba 100644
--- a/tools/gyp/pylib/gyp/common.py
+++ b/tools/gyp/pylib/gyp/common.py
@@ -306,9 +306,10 @@ def DeepDependencyTargets(target_dicts, roots):
         # Add it.
         dependencies.add(r)
         # Add its children.
-        spec = target_dicts[r]
-        pending.update(set(spec.get("dependencies", [])))
-        pending.update(set(spec.get("dependencies_original", [])))
+        if r in target_dicts:
+            spec = target_dicts[r]
+            pending.update(set(spec.get("dependencies", [])))
+            pending.update(set(spec.get("dependencies_original", [])))
     return list(dependencies - set(roots))
 
 
@@ -479,7 +480,7 @@ def CopyTool(flavor, out_path, generator_flags={}):
     # Set custom header flags.
     header = "# Generated by gyp. Do not edit.\n"
     mac_toolchain_dir = generator_flags.get("mac_toolchain_dir", None)
-    if flavor == "mac" and mac_toolchain_dir:
+    if flavor in ("mac", "ios") and mac_toolchain_dir:
         header += "import os;\nos.environ['DEVELOPER_DIR']='%s'\n" % mac_toolchain_dir
 
     # Add header and write it out.
diff --git a/tools/gyp/pylib/gyp/generator/make.py b/tools/gyp/pylib/gyp/generator/make.py
index 1b9974948e..a8c4e32f7c 100644
--- a/tools/gyp/pylib/gyp/generator/make.py
+++ b/tools/gyp/pylib/gyp/generator/make.py
@@ -65,8 +65,8 @@ generator_filelist_paths = None
 def CalculateVariables(default_variables, params):
     """Calculate additional variables for use in the build (called by gyp)."""
     flavor = gyp.common.GetFlavor(params)
-    if flavor == "mac":
-        default_variables.setdefault("OS", "mac")
+    if flavor in ("mac", "ios"):
+        default_variables.setdefault("OS", flavor)
         default_variables.setdefault("SHARED_LIB_SUFFIX", ".dylib")
         default_variables.setdefault(
             "SHARED_LIB_DIR", generator_default_variables["PRODUCT_DIR"]
@@ -378,7 +378,7 @@ CXX.target ?= %(CXX.target)s
 CXXFLAGS.target ?= $(CPPFLAGS) $(CXXFLAGS)
 LINK.target ?= %(LINK.target)s
 LDFLAGS.target ?= $(LDFLAGS)
-AR.target ?= $(AR)
+AR.target ?= %(AR.target)s
 PLI.target ?= %(PLI.target)s
 
 # C++ apps need to be linked with g++.
@@ -839,7 +839,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         self.toolset = spec["toolset"]
 
         self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)
-        if self.flavor == "mac":
+        if self.flavor in ("mac", "ios"):
             self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)
         else:
             self.xcode_settings = None
@@ -1034,7 +1034,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
 
             # Write the actual command.
             action_commands = action["action"]
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 action_commands = [
                     gyp.xcode_emulation.ExpandEnvVars(command, env)
                     for command in action_commands
@@ -1218,7 +1218,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 # action, cd_action, and mkdirs get written to a toplevel variable
                 # called cmd_foo. Toplevel variables can't handle things that change
                 # per makefile like $(TARGET), so hardcode the target.
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     action = [
                         gyp.xcode_emulation.ExpandEnvVars(command, env)
                         for command in action
@@ -1391,7 +1391,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 quoter=EscapeCppDefine,
             )
 
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 cflags = self.xcode_settings.GetCflags(
                     configname, arch=config.get("xcode_configuration_platform")
                 )
@@ -1410,7 +1410,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             self.WriteList(cflags_c, "CFLAGS_C_%s" % configname)
             self.WriteLn("# Flags passed to only C++ files.")
             self.WriteList(cflags_cc, "CFLAGS_CC_%s" % configname)
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 self.WriteLn("# Flags passed to only ObjC files.")
                 self.WriteList(cflags_objc, "CFLAGS_OBJC_%s" % configname)
                 self.WriteLn("# Flags passed to only ObjC++ files.")
@@ -1481,7 +1481,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 "%s " % precompiled_header.GetInclude("cc") + "$(CFLAGS_$(BUILDTYPE)) "
                 "$(CFLAGS_CC_$(BUILDTYPE))"
             )
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 self.WriteLn(
                     "$(OBJS): GYP_OBJCFLAGS := "
                     "$(DEFS_$(BUILDTYPE)) "
@@ -1548,7 +1548,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         """
         assert not self.is_mac_bundle
 
-        if self.flavor == "mac" and self.type in (
+        if self.flavor in ("mac", "ios") and self.type in (
             "static_library",
             "executable",
             "shared_library",
@@ -1596,7 +1596,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
     def _InstallImmediately(self):
         return (
             self.toolset == "target"
-            and self.flavor == "mac"
+            and self.flavor in ("mac", "ios")
             and self.type
             in ("static_library", "executable", "shared_library", "loadable_module")
         )
@@ -1640,7 +1640,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 [
                     target_outputs[dep]
                     for dep in spec["dependencies"]
-                    if target_outputs[dep]
+                    if (dep in target_outputs and target_outputs[dep])
                 ]
             )
             for dep in spec["dependencies"]:
@@ -1694,7 +1694,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         if self.type != "none":
             for configname in sorted(configs.keys()):
                 config = configs[configname]
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     ldflags = self.xcode_settings.GetLdflags(
                         configname,
                         generator_default_variables["PRODUCT_DIR"],
@@ -1728,7 +1728,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 library_dirs = config.get("library_dirs", [])
                 ldflags += [("-L%s" % library_dir) for library_dir in library_dirs]
                 self.WriteList(ldflags, "LDFLAGS_%s" % configname)
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     self.WriteList(
                         self.xcode_settings.GetLibtoolflags(configname),
                         "LIBTOOLFLAGS_%s" % configname,
@@ -1737,7 +1737,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             if libraries:
                 # Remove duplicate entries
                 libraries = gyp.common.uniquer(libraries)
-                if self.flavor == "mac":
+                if self.flavor in ("mac", "ios"):
                     libraries = self.xcode_settings.AdjustLibraries(libraries)
             self.WriteList(libraries, "LIBS")
             self.WriteLn(
@@ -1746,7 +1746,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             )
             self.WriteLn("%s: LIBS := $(LIBS)" % QuoteSpaces(self.output_binary))
 
-            if self.flavor == "mac":
+            if self.flavor in ("mac", "ios"):
                 self.WriteLn(
                     "%s: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))"
                     % QuoteSpaces(self.output_binary)
@@ -1755,7 +1755,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         # Postbuild actions. Like actions, but implicitly depend on the target's
         # output.
         postbuilds = []
-        if self.flavor == "mac":
+        if self.flavor in ("mac", "ios"):
             if target_postbuilds:
                 postbuilds.append("$(TARGET_POSTBUILDS_$(BUILDTYPE))")
             postbuilds.extend(gyp.xcode_emulation.GetSpecPostbuildCommands(spec))
@@ -1865,7 +1865,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                     "Spaces in alink input filenames not supported (%s)" % link_dep
                 )
             if (
-                self.flavor not in ("mac", "openbsd", "netbsd", "win")
+                self.flavor not in ("mac", "ios", "openbsd", "netbsd", "win")
                 and not self.is_standalone_static_library
             ):
                 if self.flavor in ("linux", "android"):
@@ -1984,7 +1984,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             if self.flavor != "zos":
                 installable_deps.append(self.output)
             if (
-                self.flavor == "mac"
+                self.flavor in ("mac", "ios")
                 and "product_dir" not in spec
                 and self.toolset == "target"
             ):
@@ -2419,6 +2419,18 @@ def GenerateOutput(target_list, target_dicts, data, params):
     # necessary configurations.
     default_configuration = None
     toolsets = {target_dicts[target]["toolset"] for target in target_list}
+
+    target_list_tmp = target_list.copy()
+    toolset_buildfiles = set()
+    for target in target_list_tmp:
+        if (options.toolset is None or target_dicts[target]["toolset"] in options.toolset):
+            build_file, _, _ = gyp.common.ParseQualifiedTarget(target)
+            toolset_buildfiles.add(build_file)
+        else:
+            if target in target_dicts:
+                del target_dicts[target]
+            target_list.remove(target)
+
     for target in target_list:
         spec = target_dicts[target]
         if spec["default_configuration"] != "Default":
@@ -2463,7 +2475,7 @@ def GenerateOutput(target_list, target_dicts, data, params):
         "LINK.host": GetEnvironFallback(("LINK_host", "LINK"), "$(CXX.host)"),
         "PLI.host": GetEnvironFallback(("PLI_host", "PLI"), "pli"),
     }
-    if flavor == "mac":
+    if flavor in ("mac", "ios"):
         flock_command = "./gyp-mac-tool flock"
         header_params.update(
             {
@@ -2600,8 +2612,10 @@ def GenerateOutput(target_list, target_dicts, data, params):
     # Find the list of targets that derive from the gyp file(s) being built.
     needed_targets = set()
     for build_file in params["build_files"]:
-        for target in gyp.common.AllTargets(target_list, target_dicts, build_file):
-            needed_targets.add(target)
+        if build_file in toolset_buildfiles:
+            if gyp.common.BuildFileTargets(target_list, build_file):
+                for target in gyp.common.AllTargets(target_list, target_dicts, build_file):
+                    needed_targets.add(target)
 
     build_files = set()
     include_list = set()
@@ -2641,7 +2655,7 @@ def GenerateOutput(target_list, target_dicts, data, params):
         spec = target_dicts[qualified_target]
         configs = spec["configurations"]
 
-        if flavor == "mac":
+        if flavor in ("mac", "ios"):
             gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(data[build_file], spec)
 
         writer = MakefileWriter(generator_flags, flavor)
diff --git a/tools/gyp/pylib/gyp/xcode_emulation.py b/tools/gyp/pylib/gyp/xcode_emulation.py
index 29caf1ce7f..61f311033d 100644
--- a/tools/gyp/pylib/gyp/xcode_emulation.py
+++ b/tools/gyp/pylib/gyp/xcode_emulation.py
@@ -1004,7 +1004,7 @@ class XcodeSettings:
         self.configname = configname
         libtoolflags = []
 
-        for libtoolflag in self._Settings().get("OTHER_LDFLAGS", []):
+        for libtoolflag in self._Settings().get("OTHER_LIBTOOLFLAGS", []):
             libtoolflags.append(libtoolflag)
         # TODO(thakis): ARCHS?
 
